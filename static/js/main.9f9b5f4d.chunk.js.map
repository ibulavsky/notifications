{"version":3,"sources":["components/Button.tsx","components/Notification.tsx","redux/notificationReducer.ts","redux/actionsAndThunks.ts","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["Button","props","className","onClick","name","Notification","styles","type","key","id","title","hide","ADD_NOTIFICATION","initialState","notifications","notificationReducer","state","action","notification","filter","n","noteId","deleteNotification","App","__addNotification","Date","getTime","setState","setTimeout","splice","length","showNotification","setNotification","hideNotification","Elements","this","map","Component","connect","store","dispatch","addNotification","Boolean","window","location","hostname","match","reducers","combineReducers","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAceA,G,KANA,SAACC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SAAUF,EAAMG,QCanDC,EAZM,SAACJ,GAClB,IAAIK,EAAS,gBAAkBL,EAAMM,KACrC,OACI,0BAAMC,IAAKP,EAAMQ,GAAIP,UAAWI,GAC3BL,EAAMS,MACP,0BAAMR,UAAW,aACbC,QAAS,WAAOF,EAAMU,MAAMV,EAAMQ,MADtC,O,wkBCbL,IAAMG,EAAmB,oCAG1BC,EAAe,CACjBC,cAAe,IAyBJC,EAtBa,WAAyG,IAAxGC,EAAuG,uDAAvFH,EAAcI,EAAyE,uCAChI,OAAQA,EAAOV,MACX,KAAKK,EACD,OAAO,EAAP,GACOI,EADP,CAEIF,cAAc,GAAD,mBAAME,EAAMF,eAAZ,CAA2BG,EAAOC,iBAEvD,IAb2B,uCAcvB,OAAO,EAAP,GACOF,EADP,CAEIF,cAAc,YAAKE,EAAMF,cAAcK,QAAO,SAAAC,GAC1C,OAAIA,EAAEX,KAAOQ,EAAOI,aAOhC,QACI,OAAOL,ICbNM,EAAqB,SAACD,GAAD,MAAqB,CAACd,KDZrB,uCCYgDc,WCe7EE,E,2MAEFP,MAAgB,CACZF,cAAe,I,EAInBU,kBAAoB,SAACd,EAAeH,GAChC,IAAMW,EAAe,CAACT,IAAK,IAAIgB,MAAOC,UAAYhB,QAAOH,QACzD,EAAKoB,SAAS,CACVb,cAAc,GAAD,mBAAM,EAAKE,MAAMF,eAAjB,CAAgCI,MAEjDU,YAAW,WACP,EAAKD,SACD,CAACb,cAAc,YAAK,EAAKE,MAAMF,cAAce,OAAO,EAAG,EAAKb,MAAMF,cAAcgB,aAErF,M,EAGPC,iBAAmB,SAACrB,EAAeH,GAC/B,IAAMW,EAA8B,CAACT,IAAK,IAAIgB,MAAOC,UAAYhB,QAAOH,QAExE,EAAKN,MAAM+B,gBAAgBd,I,EAG/Be,iBAAmB,SAACZ,GAChB,EAAKpB,MAAMqB,mBAAmBD,I,wEAIxB,IAAD,OACDa,EAAWC,KAAKlC,MAAMa,cAAcsB,KAAI,SAAAhB,GAAC,OAAI,kBAAC,EAAD,eAAcT,KAAM,EAAKsB,kBAAsBb,OAChG,OACI,yBAAKlB,UAAU,OACX,yBAAKA,UAAU,WACX,kBAAC,EAAD,CAAQE,KAAM,UAAWD,QAAS,WAC9B,EAAK4B,iBAAiB,UAAW,cAErC,kBAAC,EAAD,CAAQ3B,KAAM,UAAWD,QAAS,WAC9B,EAAK4B,iBAAiB,YAAa,cAEvC,kBAAC,EAAD,CAAQ3B,KAAM,QAASD,QAAS,kBAAM,EAAK4B,iBAAiB,aAAc,aAE9E,yBAAK7B,UAAW,iBACXgC,Q,GA5CHG,aAuDHC,eAJS,SAACC,GAAD,MAAoB,CACxCzB,cAAeyB,EAAMzB,cAAcA,iBAGC,CAACkB,gBDjEV,SAACd,GAAD,OAAiC,SAACsB,GAC7DA,EAP2B,SAACtB,GAAD,MAAkC,CAACX,KAAMK,EAAkBM,gBAO7EuB,CAAgBvB,IACzBU,YAAW,kBAAMY,EAASlB,EAAmBJ,EAAaT,OAAM,OC+DVa,sBAA3CgB,CAAgEf,GC1E3DmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCTAC,EAAWC,YAAgB,CAC7BlC,cAAeC,IAIJwB,EADDU,YAAYF,EAAUG,YAAgBC,MCLpDC,IAASC,OACL,kBAAC,IAAD,CAAUd,MAAOA,GACb,kBAAC,EAAD,OACSe,SAASC,eAAe,SF8HnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9f9b5f4d.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css'\r\n\r\ninterface IProps {\r\n    name: string,\r\n    onClick?: () => void,\r\n}\r\n\r\nconst Button = (props: IProps) => {\r\n    return (\r\n        <button className='button' onClick={props.onClick}>{props.name}</button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport {NotificationType} from \"../App\";\r\n\r\ninterface IProps {\r\n    type: NotificationType\r\n    id: number\r\n    title: string\r\n    hide: (noteId: number) => void\r\n}\r\n\r\nconst Notification = (props: IProps) => {\r\n    let styles = 'notification ' + props.type;\r\n    return (\r\n        <span key={props.id} className={styles}>\r\n            {props.title}\r\n            <span className={'hideButton'}\r\n                onClick={() => {props.hide(+props.id)\r\n            }}>X</span>\r\n       </span>\r\n    );\r\n};\r\n\r\nexport default Notification;\r\n","import {IState} from \"../App\";\r\nimport {IAddNotificationAction, IDeleteNotificationAction} from \"./actionsAndThunks\";\r\n\r\nexport const ADD_NOTIFICATION = 'NOTIFICATION-APP/ADD-NOTIFICATION';\r\nexport const DELETE_NOTIFICATION = 'NOTIFICATION-APP/DELETE-NOTIFICATION';\r\n\r\nconst initialState = {\r\n    notifications: [],\r\n};\r\n\r\nconst notificationReducer = (state: IState = initialState, action: (IAddNotificationAction & IDeleteNotificationAction)): IState => {\r\n    switch (action.type) {\r\n        case ADD_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notifications: [...state.notifications, action.notification],\r\n            };\r\n        case DELETE_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notifications: [...state.notifications.filter(n => {\r\n                    if (n.id !== action.noteId) {\r\n                        return true\r\n                    } else {\r\n                        return false\r\n                    }\r\n                })],\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\nexport default notificationReducer;\r\n","import {ADD_NOTIFICATION, DELETE_NOTIFICATION} from \"./notificationReducer\";\r\nimport {INotification} from \"../App\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport interface IDeleteNotificationAction {\r\n    type: string,\r\n    noteId: number\r\n}\r\n\r\nexport interface IAddNotificationAction {\r\n    type: string,\r\n    notification: INotification\r\n}\r\n\r\n// actions\r\nexport const addNotification = (notification: INotification) => ({type: ADD_NOTIFICATION, notification});\r\nexport const deleteNotification = (noteId: number) => ({type: DELETE_NOTIFICATION, noteId});\r\n\r\n// thunks\r\n// export const setNotification\r\n\r\nexport const setNotification = (notification: INotification) => (dispatch: Dispatch) => {\r\n    dispatch(addNotification(notification));\r\n    setTimeout(() => dispatch(deleteNotification(notification.id)), 3000)\r\n};\r\n","import React, {Component} from 'react' ;\r\nimport './App.css';\r\nimport Button from \"./components/Button\";\r\nimport Notification from \"./components/Notification\";\r\nimport {connect} from 'react-redux';\r\nimport {IStore} from \"./redux/store\";\r\nimport {\r\n    deleteNotification, setNotification,\r\n    IDeleteNotificationAction,\r\n} from \"./redux/actionsAndThunks\";\r\n\r\nexport interface IState {\r\n    notifications: Array<INotification>\r\n}\r\n\r\nexport interface INotification {\r\n    id: number\r\n    title: string\r\n    type: NotificationType\r\n}\r\n\r\ninterface IProps {\r\n    notifications: Array<INotification>,\r\n    // addNotification: (notification: INotification) => IAddNotificationAction\r\n    // setNotification: (notification: INotification) => (dispatch: Dispatch) => any;\r\n    setNotification: any; // здесь надо решить вопрос\r\n    deleteNotification: (noteId: number) => IDeleteNotificationAction\r\n}\r\n\r\nexport type NotificationType = \"error\" | \"success\" | \"warning\"\r\n\r\nclass App extends Component<IProps> {\r\n\r\n    state: IState = {\r\n        notifications: [],\r\n    };\r\n\r\n    //old function\r\n    __addNotification = (title: string, type: NotificationType) => {\r\n        const notification = {id: (new Date().getTime()), title, type};\r\n        this.setState({\r\n            notifications: [...this.state.notifications, notification]\r\n        });\r\n        setTimeout(() => {\r\n            this.setState(\r\n                {notifications: [...this.state.notifications.splice(1, this.state.notifications.length)]}\r\n            )\r\n        }, 3000)\r\n    };\r\n\r\n    showNotification = (title: string, type: NotificationType) => {\r\n        const notification: INotification = {id: (new Date().getTime()), title, type};\r\n        // this.props.addNotification(notification)\r\n        this.props.setNotification(notification)\r\n    };\r\n\r\n    hideNotification = (noteId: number) => {\r\n        this.props.deleteNotification(noteId)\r\n    };\r\n\r\n\r\n    render() {\r\n        let Elements = this.props.notifications.map(n => <Notification hide={this.hideNotification} {...n}/>);\r\n        return (\r\n            <div className='App'>\r\n                <div className='buttons'>\r\n                    <Button name={'Success'} onClick={() => {\r\n                        this.showNotification('YO! YO!', 'success')\r\n                    }}/>\r\n                    <Button name={'Warning'} onClick={() => {\r\n                        this.showNotification('Attention', 'warning')\r\n                    }}/>\r\n                    <Button name={'Error'} onClick={() => this.showNotification('Ohh, sheet', 'error')}/>\r\n                </div>\r\n                <div className={'notifications'}>\r\n                    {Elements}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store: IStore) => ({\r\n    notifications: store.notifications.notifications\r\n});\r\n\r\nexport default connect(mapStateToProps, {setNotification, deleteNotification})(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport notificationReducer from \"./notificationReducer\";\r\nimport thunk from \"redux-thunk\"\r\nimport { IState } from \"../App\";\r\n\r\nexport interface IStore {\r\n    notifications: IState,\r\n}\r\n\r\nconst reducers = combineReducers({\r\n    notifications: notificationReducer,\r\n});\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}